#!/bin/bash

# MCP Profile Switcher for Claude Code (Terminal CLI)
# Part of 002-mcp-manager project
# Usage: mcp-profile [dev|ui|full|status|list|backup]

# Configuration paths
CLAUDE_CONFIG="$HOME/.claude.json"
PROFILES_DIR="$HOME/.config/claude-code/profiles"
BACKUP_DIR="$HOME/.config/claude-code/backups"

# Create directories if they don't exist
mkdir -p "$PROFILES_DIR" "$BACKUP_DIR"

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Profile definitions (name, description, token estimate)
declare -A PROFILES
PROFILES[dev]="Minimal development|~7K"
PROFILES[ui]="UI/Design work|~12K"
PROFILES[full]="All servers|~85K"

# Function to get current project path
get_project_path() {
    pwd
}

# Function to check if jq is installed
check_dependencies() {
    if ! command -v jq &> /dev/null; then
        echo -e "${RED}Error: jq is required but not installed${NC}"
        echo "Install with: sudo apt install jq"
        exit 1
    fi

    if [ ! -f "$CLAUDE_CONFIG" ]; then
        echo -e "${RED}Error: Claude Code config not found at $CLAUDE_CONFIG${NC}"
        echo "Have you run Claude Code at least once?"
        exit 1
    fi
}

# Function to get servers from profile file
get_servers_from_profile() {
    local profile=$1
    local profile_file="$PROFILES_DIR/$profile.json"

    if [ -f "$profile_file" ]; then
        jq -r 'keys | join(", ")' "$profile_file" 2>/dev/null || echo "unknown"
    else
        echo "unknown"
    fi
}

# Function to get current active servers for project
get_active_servers() {
    local project_path=$(get_project_path)

    if jq -e --arg path "$project_path" '.projects[$path].mcpServers' "$CLAUDE_CONFIG" &>/dev/null; then
        jq -r --arg path "$project_path" '.projects[$path].mcpServers | keys | join(", ")' "$CLAUDE_CONFIG" 2>/dev/null || echo "none"
    else
        echo "none"
    fi
}

# Function to count active servers
count_active_servers() {
    local project_path=$(get_project_path)

    jq --arg path "$project_path" '(.projects[$path].mcpServers // {}) | length' "$CLAUDE_CONFIG" 2>/dev/null || echo "0"
}

# Function to identify active profile
identify_active_profile() {
    local project_path=$(get_project_path)

    # Get current servers config from Claude config
    local current_servers=$(jq --arg path "$project_path" '.projects[$path].mcpServers // {}' "$CLAUDE_CONFIG" 2>/dev/null)

    # Compare with each profile
    for profile in dev ui full; do
        local profile_file="$PROFILES_DIR/$profile.json"
        if [ -f "$profile_file" ]; then
            local profile_servers=$(cat "$profile_file")

            # Compare JSON objects (ignore whitespace/formatting)
            if [ "$(echo "$current_servers" | jq -S .)" = "$(echo "$profile_servers" | jq -S .)" ]; then
                echo "$profile"
                return
            fi
        fi
    done

    echo "CUSTOM"
}

show_status() {
    check_dependencies

    local project_path=$(get_project_path)
    local active_profile=$(identify_active_profile)
    local server_count=$(count_active_servers)
    local servers=$(get_active_servers)

    echo -e "${BLUE}=== MCP Profile Status ===${NC}"
    echo ""
    echo -e "Project: ${CYAN}$project_path${NC}"
    echo ""

    if [ "$active_profile" != "CUSTOM" ]; then
        IFS='|' read -r desc tokens <<< "${PROFILES[$active_profile]}"

        # Color based on token usage
        if [[ "$tokens" == *"7K"* ]]; then
            TOKEN_COLOR=$GREEN
        elif [[ "$tokens" == *"12K"* ]]; then
            TOKEN_COLOR=$YELLOW
        else
            TOKEN_COLOR=$RED
        fi

        echo -e "Active Profile: ${CYAN}${active_profile^^}${NC}"
        echo -e "Description: $desc"
        echo -e "Servers ($server_count): $servers"
        echo -e "Context Usage: ${TOKEN_COLOR}$tokens tokens${NC}"
    else
        echo -e "Active Profile: ${YELLOW}CUSTOM${NC}"
        echo -e "Description: Custom configuration"
        echo -e "Servers ($server_count): $servers"
    fi

    echo ""
    list_profiles
}

list_profiles() {
    echo -e "${BLUE}Available Profiles:${NC}"
    for profile in dev ui full; do
        IFS='|' read -r desc tokens <<< "${PROFILES[$profile]}"
        servers=$(get_servers_from_profile "$profile")
        printf "  %-6s - %s - %s\n" "$profile" "$desc" "$tokens"
        printf "           Servers: %s\n" "$servers"
    done
    echo ""
    echo "Usage: mcp-profile [dev|ui|full|status|list|backup]"
}

switch_profile() {
    check_dependencies

    local PROFILE=$1
    local PROFILE_FILE="$PROFILES_DIR/$PROFILE.json"
    local project_path=$(get_project_path)

    if [ ! -f "$PROFILE_FILE" ]; then
        echo -e "${RED}Error: Profile '$PROFILE' not found${NC}"
        echo "Looking for: $PROFILE_FILE"
        echo ""
        list_profiles
        exit 1
    fi

    # Backup current Claude config
    TIMESTAMP=$(date +%Y%m%d_%H%M%S)
    cp "$CLAUDE_CONFIG" "$BACKUP_DIR/claude-backup-$TIMESTAMP.json"
    echo -e "${BLUE}✓ Backed up Claude config${NC}"
    echo "  → $BACKUP_DIR/claude-backup-$TIMESTAMP.json"
    echo ""

    # Read profile servers
    local new_servers=$(cat "$PROFILE_FILE")

    # Update Claude config with new servers for current project
    # This creates the project entry if it doesn't exist
    jq --arg path "$project_path" \
       --argjson servers "$new_servers" \
       '.projects[$path].mcpServers = $servers' \
       "$CLAUDE_CONFIG" > "$CLAUDE_CONFIG.tmp" && mv "$CLAUDE_CONFIG.tmp" "$CLAUDE_CONFIG"

    echo -e "${GREEN}✓ Switched to '$PROFILE' profile${NC}"
    echo ""
    echo -e "${YELLOW}⚠  IMPORTANT: Restart Claude Code for changes to take effect${NC}"
    echo ""

    # Show new status
    show_status
}

show_backups() {
    echo -e "${BLUE}=== Recent Backups ===${NC}"
    echo ""

    if [ ! -d "$BACKUP_DIR" ] || [ -z "$(ls -A "$BACKUP_DIR" 2>/dev/null)" ]; then
        echo -e "${YELLOW}No backups found${NC}"
        return
    fi

    ls -lht "$BACKUP_DIR"/*.json 2>/dev/null | head -10 | while read -r line; do
        echo "  $line"
    done
    echo ""
    echo "Backup directory: $BACKUP_DIR"
}

interactive_menu() {
    check_dependencies

    while true; do
        clear
        echo -e "${CYAN}=== MCP Profile Switcher ===${NC}"
        echo ""

        # Show current status
        local project_path=$(get_project_path)
        local active_profile=$(identify_active_profile)
        local server_count=$(count_active_servers)

        echo -e "Project: ${CYAN}$project_path${NC}"

        if [ "$active_profile" != "CUSTOM" ]; then
            IFS='|' read -r desc tokens <<< "${PROFILES[$active_profile]}"
            echo -e "Current profile: ${CYAN}${active_profile^^}${NC} ($desc, $tokens tokens)"
        else
            echo -e "Current profile: ${YELLOW}CUSTOM${NC} ($server_count servers)"
        fi

        echo ""
        echo "Select an action:"
        echo ""

        PS3=$'\n'"${BLUE}Enter choice [1-6]: ${NC}"

        options=(
            "Switch to DEV profile (Minimal, ~7K tokens)"
            "Switch to UI profile (Design work, ~12K tokens)"
            "Switch to FULL profile (All servers, ~85K tokens)"
            "Show detailed status"
            "Show recent backups"
            "Quit"
        )

        select opt in "${options[@]}"; do
            case $REPLY in
                1)
                    echo ""
                    switch_profile "dev"
                    echo ""
                    read -p "Press Enter to continue..."
                    break
                    ;;
                2)
                    echo ""
                    switch_profile "ui"
                    echo ""
                    read -p "Press Enter to continue..."
                    break
                    ;;
                3)
                    echo ""
                    switch_profile "full"
                    echo ""
                    read -p "Press Enter to continue..."
                    break
                    ;;
                4)
                    echo ""
                    show_status
                    echo ""
                    read -p "Press Enter to continue..."
                    break
                    ;;
                5)
                    echo ""
                    show_backups
                    echo ""
                    read -p "Press Enter to continue..."
                    break
                    ;;
                6)
                    echo ""
                    echo -e "${GREEN}Goodbye!${NC}"
                    exit 0
                    ;;
                *)
                    echo -e "${RED}Invalid option. Please select 1-6.${NC}"
                    ;;
            esac
        done
    done
}

# Main script logic
case "${1:-interactive}" in
    dev|ui|full)
        switch_profile "$1"
        ;;
    status)
        show_status
        ;;
    list)
        list_profiles
        ;;
    backup|backups)
        show_backups
        ;;
    help|--help|-h)
        echo -e "${CYAN}MCP Profile Switcher${NC}"
        echo ""
        echo "Manages MCP server profiles for Claude Code terminal CLI"
        echo ""
        echo "Commands:"
        echo "  dev        - Switch to minimal development profile"
        echo "  ui         - Switch to UI work profile"
        echo "  full       - Switch to full profile (all servers)"
        echo "  status     - Show current active profile"
        echo "  list       - List all available profiles"
        echo "  backup     - Show recent backups"
        echo "  help       - Show this help message"
        echo "  (no args)  - Interactive menu (default)"
        echo ""
        echo "Configuration:"
        echo "  Claude config: $CLAUDE_CONFIG"
        echo "  Profiles dir:  $PROFILES_DIR"
        echo "  Backups dir:   $BACKUP_DIR"
        echo ""
        echo "Note: Changes apply to current project: $(get_project_path)"
        echo "      Restart Claude Code after switching profiles"
        ;;
    interactive|"")
        interactive_menu
        ;;
    *)
        echo -e "${RED}Unknown command: $1${NC}"
        echo ""
        list_profiles
        exit 1
        ;;
esac
