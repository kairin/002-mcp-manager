#!/usr/bin/env python3
"""
Secure Configuration Migration Script

This script migrates MCP server configurations from hardcoded API keys
to environment variable references, following OAuth 2.0 best practices.

CRITICAL SECURITY FIX: This addresses the vulnerability where API keys
were stored directly in configuration files.
"""

import json
import os
import sys
from pathlib import Path
from typing import Any

from rich.console import Console
from rich.panel import Panel
from rich.prompt import Confirm

console = Console()


def backup_config(config_path: Path) -> Path:
    """Create a backup of the configuration file."""
    backup_path = config_path.with_suffix(f"{config_path.suffix}.backup")
    backup_path.write_text(config_path.read_text())
    console.print(f"[green]‚úì Backup created: {backup_path}[/green]")
    return backup_path


def extract_tokens(config: dict[str, Any]) -> dict[str, str]:
    """Extract API tokens from configuration."""
    tokens = {}

    mcp_servers = config.get("mcpServers", {})

    # Context7
    if "context7" in mcp_servers:
        headers = mcp_servers["context7"].get("headers", {})
        if api_key := headers.get("CONTEXT7_API_KEY"):
            if not api_key.startswith("${"):
                tokens["CONTEXT7_API_KEY"] = api_key

    # GitHub
    if "github" in mcp_servers:
        headers = mcp_servers["github"].get("headers", {})
        if auth := headers.get("Authorization"):
            if auth.startswith("Bearer ") and not auth.startswith("Bearer ${"):
                tokens["GITHUB_PERSONAL_ACCESS_TOKEN"] = auth.replace("Bearer ", "")

    # Hugging Face
    if "hf-mcp-server" in mcp_servers:
        headers = mcp_servers["hf-mcp-server"].get("headers", {})
        if auth := headers.get("Authorization"):
            if auth.startswith("Bearer ") and not auth.startswith("Bearer ${"):
                tokens["HUGGINGFACE_TOKEN"] = auth.replace("Bearer ", "")

    return tokens


def migrate_to_env_vars(config: dict[str, Any]) -> dict[str, Any]:
    """Migrate configuration to use environment variable references."""
    mcp_servers = config.get("mcpServers", {})

    # Context7
    if "context7" in mcp_servers:
        if "headers" not in mcp_servers["context7"]:
            mcp_servers["context7"]["headers"] = {}
        mcp_servers["context7"]["headers"]["CONTEXT7_API_KEY"] = "${CONTEXT7_API_KEY}"

    # GitHub
    if "github" in mcp_servers:
        if "headers" not in mcp_servers["github"]:
            mcp_servers["github"]["headers"] = {}
        mcp_servers["github"]["headers"][
            "Authorization"
        ] = "Bearer ${GITHUB_PERSONAL_ACCESS_TOKEN}"

    # Hugging Face
    if "hf-mcp-server" in mcp_servers:
        if "headers" not in mcp_servers["hf-mcp-server"]:
            mcp_servers["hf-mcp-server"]["headers"] = {}
        mcp_servers["hf-mcp-server"]["headers"][
            "Authorization"
        ] = "Bearer ${HUGGINGFACE_TOKEN}"

    return config


def create_env_file(tokens: dict[str, str], env_path: Path) -> None:
    """Create .env file with extracted tokens."""
    if env_path.exists():
        console.print(f"[yellow]‚ö†Ô∏è  {env_path} already exists[/yellow]")
        if not Confirm.ask("Overwrite?"):
            console.print("[cyan]Skipping .env creation[/cyan]")
            return

    env_content = "# MCP Manager Environment Variables\n"
    env_content += "# Generated by secure migration script\n\n"

    for key, value in tokens.items():
        env_content += f"{key}={value}\n"

    env_path.write_text(env_content)
    env_path.chmod(0o600)  # Secure file permissions
    console.print(f"[green]‚úì Created {env_path} with secure permissions (0600)[/green]")


def display_security_summary(tokens: dict[str, str]) -> None:
    """Display security issues found and actions to take."""
    console.print(
        Panel.fit(
            "[bold red]üö® SECURITY ISSUE DETECTED[/bold red]\n\n"
            f"Found [bold]{len(tokens)}[/bold] hardcoded API keys in configuration.\n\n"
            "[yellow]Immediate Actions Required:[/yellow]\n"
            "1. ‚úÖ Migrate config to use environment variables (this script)\n"
            "2. üîÑ Revoke exposed API keys and generate new ones\n"
            "3. üìù Update .env file with new keys\n"
            "4. üîí Verify .claude.json is in .gitignore\n"
            "5. üßπ Remove .claude.json from git history if committed",
            title="Security Alert",
        )
    )


def main() -> int:
    """Main migration workflow."""
    console.print(
        "[bold cyan]MCP Configuration Security Migration[/bold cyan]\n",
        style="bold",
    )

    # Check for Claude config
    claude_config_path = Path.home() / ".claude.json"
    if not claude_config_path.exists():
        console.print("[yellow]No .claude.json found. Nothing to migrate.[/yellow]")
        return 0

    try:
        # Load configuration
        with open(claude_config_path) as f:
            config = json.load(f)

        # Extract tokens
        tokens = extract_tokens(config)

        if not tokens:
            console.print(
                "[green]‚úì Configuration already uses environment variables![/green]"
            )
            return 0

        # Display security summary
        display_security_summary(tokens)

        console.print(f"\n[bold]Found tokens:[/bold]")
        for key in tokens.keys():
            console.print(f"  ‚Ä¢ {key}")

        console.print()
        if not Confirm.ask("[bold]Proceed with migration?[/bold]"):
            console.print("[yellow]Migration cancelled[/yellow]")
            return 1

        # Create backup
        backup_path = backup_config(claude_config_path)

        # Migrate configuration
        migrated_config = migrate_to_env_vars(config)

        # Save migrated configuration
        with open(claude_config_path, "w") as f:
            json.dump(migrated_config, f, indent=2)

        console.print(f"[green]‚úì Migrated {claude_config_path}[/green]")

        # Create .env file
        env_path = Path.cwd() / ".env"
        if Confirm.ask(f"\nCreate {env_path} with extracted tokens?"):
            create_env_file(tokens, env_path)

        # Success message
        console.print(
            Panel.fit(
                "[bold green]‚úÖ Migration Complete![/bold green]\n\n"
                "[yellow]Next Steps:[/yellow]\n"
                "1. Source environment variables: [cyan]source .env[/cyan]\n"
                "2. Verify MCP servers work: [cyan]claude mcp list[/cyan]\n"
                "3. [bold red]CRITICAL:[/bold red] Revoke old API keys:\n"
                "   ‚Ä¢ Context7: https://context7.com/settings\n"
                "   ‚Ä¢ GitHub: https://github.com/settings/tokens\n"
                "   ‚Ä¢ Hugging Face: https://huggingface.co/settings/tokens\n"
                f"4. Restore from backup if needed: [cyan]{backup_path}[/cyan]",
                title="Success",
            )
        )

        return 0

    except Exception as e:
        console.print(f"[red]‚ùå Migration failed: {e}[/red]")
        return 1


if __name__ == "__main__":
    sys.exit(main())
